/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     ArrayList<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
public class Solution {
    /**
     * @param node: A undirected graph node
     * @return: A undirected graph node
     */
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        // write your code here
        
        if(node == null)
        {
            return null;
        }
        
        HashMap<UndirectedGraphNode, UndirectedGraphNode> map = new HashMap<UndirectedGraphNode, UndirectedGraphNode>();
        
        
        Queue<UndirectedGraphNode> q = new LinkedList<UndirectedGraphNode>();
        q.offer(node);
        map.put(node, new UndirectedGraphNode(node.label));
        
        while(!q.isEmpty())
        {
            UndirectedGraphNode cur = q.poll();
            
            for(UndirectedGraphNode n : cur.neighbors)
            {
                if(!map.containsKey(n))
                {
                    map.put(n, new UndirectedGraphNode(n.label));
                    q.offer(n);
                }
            }
        }
        
        for(Map.Entry<UndirectedGraphNode, UndirectedGraphNode> e : map.entrySet())
        {
             ArrayList<UndirectedGraphNode> list = new ArrayList<UndirectedGraphNode>();
             for(UndirectedGraphNode n : e.getKey().neighbors)
             {
                 if(map.containsKey(n))
                 {
                     list.add(map.get(n));
                 }
             }
             e.getValue().neighbors = list;
        }
        
        return map.get(node);
        
    }
}
