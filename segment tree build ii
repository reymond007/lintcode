/**
 * Definition of SegmentTreeNode:
 * public class SegmentTreeNode {
 *     public int start, end, max;
 *     public SegmentTreeNode left, right;
 *     public SegmentTreeNode(int start, int end, int max) {
 *         this.start = start;
 *         this.end = end;
 *         this.max = max
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     *@param A: a list of integer
     *@return: The root of Segment Tree
     */
    public SegmentTreeNode build(int[] A) {
        // write your code here
        
        if(A == null || A.length == 0)
        {
            return null;
        }
        
        return helper(A, 0, A.length-1);
    }
    
    public SegmentTreeNode helper(int[] A, int start, int end)
    {
        if(start == end)
        {
            return new SegmentTreeNode(start,end,A[start]);
        }
        
        int mid = start + (end-start)/2;
        int max = getMax(A, start, end);
        SegmentTreeNode root = new SegmentTreeNode(start,end, max);
        
        SegmentTreeNode left = helper(A,start,mid);
        SegmentTreeNode right = helper(A,mid+1,end);
        
        root.left = left;
        root.right = right;
        
        return root;
        
    }
    
    public int getMax(int[]A, int start, int end)
    {
        int max = Integer.MIN_VALUE;
        
        for(int i = start; i <= end; i++)
        {
            max = Math.max(max, A[i]);
        }
        return max;
    }
}
