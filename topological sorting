/**
 * Definition for Directed graph.
 * class DirectedGraphNode {
 *     int label;
 *     ArrayList<DirectedGraphNode> neighbors;
 *     DirectedGraphNode(int x) { label = x; neighbors = new ArrayList<DirectedGraphNode>(); }
 * };
 */
public class Solution {
    /**
     * @param graph: A list of Directed graph node
     * @return: Any topological order for the given graph.
     */    
    public ArrayList<DirectedGraphNode> topSort(ArrayList<DirectedGraphNode> graph) {
        // write your code here
        
        if(graph == null || graph.size() == 0)
        {
            return null;
        }
        
        ArrayList<DirectedGraphNode> results = new ArrayList<DirectedGraphNode>();
        HashSet<DirectedGraphNode> set = new HashSet<DirectedGraphNode>();
        
        for(DirectedGraphNode node : graph)
        {
            helper(node, results, set);
        }
        return results;
    }
    
    public void helper(DirectedGraphNode node, ArrayList<DirectedGraphNode> results, HashSet<DirectedGraphNode> set)
    {
        if(set.contains(node))
        {
            return;
        }
        
        set.add(node);
        for(DirectedGraphNode n : node.neighbors)
        {
            helper(n, results, set);
        }
        
        results.add(0, node);
    }
}
