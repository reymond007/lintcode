/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 * Example of iterate a tree:
 * Solution iterator = new Solution(root);
 * while (iterator.hasNext()) {
 *    TreeNode node = iterator.next();
 *    do something for node
 * } 
 */
public class Solution {
    //@param root: The root of binary tree.
    Stack<TreeNode> stack;
    public Solution(TreeNode root) {
        // write your code here
        
        stack = new Stack<TreeNode>();
        if(root == null)
        {
            return;
        }
        stack.push(root);
        
        while(root.left != null)
        {
            stack.push(root.left);
            root = root.left;
        }
    }

    //@return: True if there has next node, or false
    public boolean hasNext() {
        // write your code here
        return !stack.isEmpty();
    }
    
    //@return: return next node
    public TreeNode next() {
        // write your code here
        if(hasNext())
        {
            TreeNode next = stack.pop();
            
            if(next.right != null)
            {
                stack.push(next.right);
                TreeNode cur = next.right;
                while(cur.left != null)
                {
                    stack.push(cur.left);
                    cur = cur.left;
                }
            }
            
            return next;
        }
        else
        {
            return null;
        }
    }
}
