/**
 * Definition of Interval:
 * public classs Interval {
 *     int start, end;
 *     Interval(int start, int end) {
 *         this.start = start;
 *         this.end = end;
 *     }
 */

class Point
{
    int time;
    int flag;
    
    public Point(int time, int flag)
    {
        this.time = time;
        this.flag = flag;
    }
}
 
class PointComparator implements Comparator<Point>
{
    public int compare(Point p1, Point p2)
    {
        if(p1.time == p2.time)
        {
            return p1.flag - p2.flag;
        }
        return p1.time-p2.time;
    }
}

class Solution {
    /**
     * @param intervals: An interval array
     * @return: Count of airplanes are in the sky.
     */
    public int countOfAirplanes(List<Interval> airplanes) { 
        // write your code here
        
        if(airplanes == null || airplanes.size() == 0)
        {
            return 0;
        }
        
        List<Point> points = new ArrayList<Point>(airplanes.size()*2);
        
        for(Interval interval : airplanes)
        {
            points.add(new Point(interval.start,1));
            points.add(new Point(interval.end,0));
        }
        
        Collections.sort(points, new PointComparator());
        
        int count = 0;
        int max = 0;
        
        for(int i = 0; i < points.size(); i++)
        {
            if(points.get(i).flag == 1)
            {
                count++;
            }
            else
            {
                count--;
            }
            max = Math.max(max,count);
        }
        
        return max;
    }
}
